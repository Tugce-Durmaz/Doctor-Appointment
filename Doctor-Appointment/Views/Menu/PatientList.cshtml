<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Patient Management</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background-color: #eaf4fc; /* Açık mavi arka plan */
        }

        h1 {
            text-align: center;
            color: #1a73e8; /* Canlı mavi başlık */
            margin-bottom: 30px;
        }

        .form-container, .patients-list {
            margin: 0 auto;
            width: 80%;
            max-width: 600px;
            background: white;
            border-radius: 10px; /* Daha yuvarlak köşeler */
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.1); /* Daha belirgin gölge */
            padding: 25px;
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 15px;
            margin-bottom: 20px;
        }

        input[type="text"], input[type="number"] {
            padding: 12px;
            font-size: 16px;
            border: 1px solid #b0c4de;
            border-radius: 6px;
            transition: border-color 0.3s;
        }

            input[type="text"]:focus, input[type="number"]:focus {
                border-color: #1a73e8; /* Mavi sınır */
                outline: none;
            }

        input[type="submit"] {
            padding: 12px;
            font-size: 16px;
            background-color: #1a73e8; /* Mavi buton */
            color: white;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

            input[type="submit"]:hover {
                background-color: #1665c1; /* Buton hover rengi */
            }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        table, th, td {
            border: 1px solid #d0e0f5; /* Daha hafif gri sınır */
        }

        th, td {
            padding: 12px;
            text-align: left;
        }

        th {
            background-color: #f0f8ff; /* Açık mavi tablo başlığı */
            color: #333;
        }

        .actions button {
            margin-right: 5px;
            padding: 7px 12px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s;
        }

        .edit-btn {
            background-color: #1a73e8; /* Mavi düzenle butonu */
            color: white;
        }

            .edit-btn:hover {
                background-color: #1665c1;
            }

        .delete-btn {
            background-color: #f44336; /* Kırmızı sil butonu */
            color: white;
        }

            .delete-btn:hover {
                background-color: #d32f2f;
            }

        input[type="text"]#search-bar {
            width: 100%;
            padding: 12px;
            border: 1px solid #b0c4de;
            border-radius: 6px;
            margin-top: 10px;
            transition: border-color 0.3s;
        }

            input[type="text"]#search-bar:focus {
                border-color: #1a73e8; /* Mavi sınır */
                outline: none;
            }
    </style>
</head>
<body>

    <!-- Patient List -->
    <div class="patients-list">
        <h2>Patients</h2>
        <input type="text" id="search-bar" placeholder="Search patients by name or TC NO" oninput="searchPatients()">
        <table>
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Last Name</th>
                    <th>TC NO</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody id="patients-table-body">
                <!-- Hastalar buraya eklenecek -->
            </tbody>
        </table>
    </div>

    <script>
        let patients = [];

        // Sayfa yüklendiğinde hastaları al
        document.addEventListener('DOMContentLoaded', async function () {
            await fetchPatients();
        });

        // Hastaları backend'den al
        async function fetchPatients() {
            try {
                const response = await fetch('/patients'); // FindAll endpoint'ine istek yapma
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                patients = await response.json(); // JSON formatında yanıt alma
                renderPatients(); // Hastaları görüntüleme
            } catch (error) {
                console.error('Hata:', error);
            }
        }

        // Render patients to the table
        function renderPatients() {
            const tbody = document.getElementById('patients-table-body');
            tbody.innerHTML = ''; // Önceki verileri temizle
            patients.forEach(patient => {
                const row = `<tr>
                                          <td>${patient.name}</td>
                                          <td>${patient.lastName}</td>
                                          <td>${patient.tcNO}</td>
                                          <td class="actions">
                                            <button class="edit-btn" onclick="editPatient('${patient.id}')">Edit</button>
                                            <button class="delete-btn" onclick="deletePatient('${patient.id}')">Delete</button>
                                          </td>
                                        </tr>`;
                tbody.insertAdjacentHTML('beforeend', row);
            });
        }

        // Search patients by name or TC NO
        function searchPatients() {
            const searchTerm = document.getElementById('search-bar').value.toLowerCase();
            const filteredPatients = patients.filter(patient =>
                patient.name.toLowerCase().includes(searchTerm) || patient.tcNO.includes(searchTerm)
            );
            const tbody = document.getElementById('patients-table-body');
            tbody.innerHTML = '';
            filteredPatients.forEach(patient => {
                const row = `<tr>
                                          <td>${patient.name}</td>
                                          <td>${patient.lastName}</td>
                                          <td>${patient.tcNO}</td>
                                          <td class="actions">
                                            <button class="edit-btn" onclick="editPatient('${patient.id}')">Edit</button>
                                            <button class="delete-btn" onclick="deletePatient('${patient.id}')">Delete</button>
                                          </td>
                                        </tr>`;
                tbody.insertAdjacentHTML('beforeend', row);
            });
        }

        // Diğer fonksiyonlar burada kalabilir (addPatient, updatePatient, editPatient, deletePatient, vb.)
    </script>
</body>
</html>
